head	1.6;
access;
symbols;
locks
	o2-gray:1.6; strict;
comment	@ * @;


1.6
date	2016.04.10.03.02.59;	author o2-gray;	state Exp;
branches;
next	1.5;

1.5
date	2016.04.06.03.18.40;	author o2-gray;	state Exp;
branches;
next	1.4;

1.4
date	2016.04.03.03.04.41;	author o2-gray;	state Exp;
branches;
next	1.3;

1.3
date	2016.04.02.03.54.32;	author o2-gray;	state Exp;
branches;
next	1.2;

1.2
date	2016.04.01.03.07.40;	author o2-gray;	state Exp;
branches;
next	1.1;

1.1
date	2016.03.30.04.02.54;	author o2-gray;	state Exp;
branches;
next	;


desc
@Framework set up
@


1.6
log
@Now deallocating and communicating with oss better with many processes.
Collecting statistics data along the way now.
@
text
@#include "functs.h"

int semKey = 8675309, semId;
int semKey2 = 8008135, semId2;
int semKeyCond = 90210, semIdCond;//For processes requesting resources
int key = 4444444;
int key2 = 5555555;
int key3 = 6666666;
int shmidVal;
int shmidVal2;
int shmidVal3;

int main(int argc, char * argv[]){

char *p;
int processId = strtol(argv[0],&p,10);
shmidVal = strtol(argv[1],&p,10);
shmidVal2 = strtol(argv[2],&p,10);
shmidVal3 = strtol(argv[3],&p,10);

double currTime, currTime2, arrivalTime, startTime, endTime, turnAround, currRunTime, terminateTime, checkTerminate, deallocateTime, checkDeallocate;
srand(time(NULL));
int processRequestId = -2;//Initialize to something other than process number
int terminate = 0, resourceIndex, amountDeallocate;
int r;//For for loops
bool oneSecPassed = false;//if 1 second has passed, can start checking if can terminate
bool processBlocked = false;//True if process blocked (in a Queue)
bool hasResources = false;//True if process has a resource allocated to it

double genRandomDouble(int processId);//No funct overloading in C, this oss & process funct different

struct PCB *processBlock;
struct timing *timer;
struct resourceTable *resource;

//Attach to shared mem
if((processBlock = (struct PCB *)shmat(shmidVal,(void *)0, 0)) == (void *)-1){ //Returns void*
        fprintf(stderr,"%s Line %d ",__FILE__,__LINE__);
        perror("shmat");
        exit(EXIT_FAILURE);
}
if((timer = (struct timing *)shmat(shmidVal2, 0, 0)) == (void *)-1){ //Returns void*
	fprintf(stderr,"%s Line %d ",__FILE__,__LINE__);
	perror("shmat");
	exit(EXIT_FAILURE);
}
if((resource = (struct resourceTable*)shmat(shmidVal3, 0, 0)) == (void *)-1){ //Returns void*
	fprintf(stderr,"%s Line %d ",__FILE__,__LINE__);
	perror("shmat");
	exit(EXIT_FAILURE);
}

//Get/Create semaphores
if((semId = semget(semKey,1,0)) == -1){//For clock
	fprintf(stderr,"%s Line %d ",__FILE__,__LINE__);
	perror(" semget");
	exit(EXIT_FAILURE);
}
if((semIdCond = semget(semKeyCond,1,0)) == -1){//For resource requests
	fprintf(stderr,"%s Line %d ",__FILE__,__LINE__);
	perror(" semget");
	exit(EXIT_FAILURE);
}
if((semId2 = semget(semKey2,1,0)) == -1){//For clock
	fprintf(stderr,"%s Line %d ",__FILE__,__LINE__);
	perror(" semget");
	exit(EXIT_FAILURE);
}

// fprintf(stdout,"********************************Process %d Max Claims***********************************\n", processId);
for(r = 0; r < 20; r++){//Figure out this processes max claim for each resource
	processBlock->maxClaim[processId][r] = rand() % resource->total[r];//Max claim = [0-total number of this resource in system]
	// fprintf(stdout,"Res %d = %d, ", r, processBlock->maxClaim[processId][r]);
}
// fprintf(stdout,"\n\n");

fprintf(stdout,"********************************Process %d Initial Needs***********************************\n", processId);
for(r = 0; r < 20; r++){
	processBlock->need[processId][r] = processBlock->maxClaim[processId][r] - processBlock->allocated[processId][r];//Need = Max - Allocated
	fprintf(stdout,"%d of %d, ", processBlock->need[processId][r], r);
}
fprintf(stdout,"\n\n");

int t = 0;
arrivalTime = getTotalTime(&timer->clockSecs, &timer->clockNanos, &arrivalTime);//Get arrival time
startTime = getTotalTime(&timer->clockSecs, &timer->clockNanos, &startTime);//Get start time
while(true){
	// fprintf(stdout,"ENTER %d Running time: %.9f\n",processId, currRunTime);

if(oneSecPassed){//If process has run for more than 1 second, start seeing if can terminate
	// fprintf(stdout,"%d: %.9f s > %.9f s ?\n", processId, terminateTime, checkTerminate);
	if(terminateTime > checkTerminate){//Check if process chould terminate at random times between 0 and 250ms
		terminate = rand() % (processId + 10);// + processId so concurrent processes don't get same num since seeded with time, +10 so large enough to % again
		terminate = terminate % 2;//Check if process will terminate
		if(terminate == 1){//Deallocate all resources and end
			waitSem();
			/***************************
			Deallocate/Release resources
			***************************/
			processBlock->processDone = processId;//Remove from bitVector
			processBlock->running[processId] = 0;
			// processBlock->processDone = processId;//Remove from bitVector
			for(r = 0; r < 20; r++){
				processBlock->maxClaim[processId][r] = -1;
				processBlock->release[processId][r] = processBlock->release[processId][r] + processBlock->allocated[processId][r];
				resource->available[r] = resource->available[r] + processBlock->allocated[processId][r];
				processBlock->allocated[processId][r] = -1;
				if(inQueue(20, 18, resource->blocked, r, processId)){//If process blocked in a queue, remove it
					int id = selectFromQueue(resource->blocked[r], &resource->blockedTail[processBlock->requesting[processId]], processId);
					// fprintf(stdout,"Process %d Removed from %d Queue\n", id, r);
				}
			}
			fprintf(stdout,"Process %d terminating...\n", processId);
			endTime = getTotalTime(&timer->clockSecs, &timer->clockNanos, &endTime);//Get time ended at
			turnAround = endTime - arrivalTime;
			processBlock->cpuTimeUsed[processId] = processBlock->cpuTimeUsed[processId] + turnAround;
			fprintf(stdout,"%d: arrivalTime %.9f, endTime %.9f, turnAround: %.9f, cpuTimeUsed: %.9f\n", processId, arrivalTime, endTime, turnAround, processBlock->cpuTimeUsed[processId]);
			signalSem();
			return 0;
			// exit(1);
			// break;
		}
		
		if(processBlock->running[processId] == 1){
			fprintf(stdout,"Process %d processBlock->running[%d] = %d...\n", processId, processId, processBlock->running[processId]);
			waitRequest();
			// fprintf(stdout,"%d after waitRequest\n", processId);
			/***********************************
				Request random resource
			***********************************/
			int numResClasses = 0;
			int resWanted[20];//Array will hold all res classes this process currently wanting
			for(r = 0; r < 20; r++){
				resWanted[r] = -1;
			}
			for(r = 0; r < 20; r++){//Count number of resource classes & store the classes in array to choose from
				if(processBlock->need[processId][r] != 0){
					resWanted[numResClasses] = r;
					numResClasses++;
				}
			}
			// fprintf(stdout,"%d numResClasses = %d\n", processId, numResClasses);
			resourceIndex = rand() % numResClasses;//Pick a random resource to allocate
			// fprintf(stdout,"**%d resourceIndex = %d\n", processId, resourceIndex);
			processBlock->requesting[processId] = resWanted[resourceIndex];//Pick a random resource to allocate
			// fprintf(stdout,"processBlock->requesting[%d] = %d\n", processId, processBlock->requesting[processId]);
			processBlock->processRequesting = processId;
			processRequestId = processBlock->processRequesting;
			// fprintf(stdout,"***Process processBlock->requesting[%d] = %d, resourceIndex = %d, resWanted[%d] = %d, numResClasses = %d\n", processId, processBlock->requesting[processId], resourceIndex, resourceIndex, resWanted[resourceIndex], numResClasses);
			while(processRequestId != -1){
				processRequestId = processBlock->processRequesting;
				signalRequest(processRequestId);
			}
			if(processBlock->running[processId] == 0){//If process was blocked, mark the time
				processBlock->idle[processId] = getTotalTime(&timer->clockSecs, &timer->clockNanos, &currRunTime);
			}
			printResources(processBlock , resource);
			advanceClock(&timer->clockSecs, &timer->clockNanos);//advance clock since not terminating
			currTime = getTotalTime(&timer->clockSecs, &timer->clockNanos, &currTime);
			checkTerminate = genRandomDouble(processId);//Generate new time 0-250ms to see if we will terminate
			// fprintf(stdout,"Process %d NOT terminating %d, processBlock->processRequesting AFTER %d, NEW terminate time: %.9f...\n", processId, terminate, processBlock->processRequesting, checkTerminate);
			if(processBlock->running[processId] == 1){//If didn't get blocked
				fprintf(stdout,"Process %d NOT terminating\n", processId);
			}
		}
	}
}

// if(processBlock->running[processId] == 0){
	// while(){
		// waitUnblocked();
	// }
	// signalUnblocked();
// }

if(oneSecPassed){
	for(r = 0; r < 20; r++){//Check to see if process has any resources to get rid of
		if(processBlock->allocated[processId][r] != 0){
			// fprintf(stdout,"%d %.9fs > %.9fs?   hasResources processBlock->allocated[%d][%d] = %d\n", processId, deallocateTime, checkDeallocate, processId, r, processBlock->allocated[processId][r]);
			hasResources = true;//process has a resource allocated to it
			break;
		}
	}
}

//Make sure random time passed, process has resources, is running (not blocked), and has had chance to request resources
if(deallocateTime > checkDeallocate && hasResources && processBlock->running[processId] == 1 && oneSecPassed){
	waitSem();//Only one can deallocate at a time
	// fprintf(stdout,"START Random Deallocating %d\n", processId);
	// fprintf(stdout,"%d: %.9fs > %.9fs? hasResources = %d\n", processId, deallocateTime, checkDeallocate, hasResources);
	int numResHave = 0;
	int resHave[20];//Array will hold all res classes this process currently wanting
	for(r = 0; r < 20; r++){
		resHave[r] = -1;
	}
	for(r = 0; r < 20; r++){//Count number of resource classes & store the classes in array to choose from
		if(processBlock->allocated[processId][r] != 0){
			// fprintf(stdout,"HAVE processBlock->allocated[%d][%d] = %d\n", processId, r, processBlock->allocated[processId][r]);
			resHave[numResHave] = r;
			// fprintf(stdout,"HAVE processBlock->allocated[%d][%d] = %d, resHave[%d] = %d\n", processId, r, processBlock->allocated[processId][r], numResHave, resHave[numResHave]);
			numResHave++;
		}else{
			// fprintf(stdout,"DON'T HAVE processBlock->allocated[%d][%d] = %d\n", processId, r, processBlock->allocated[processId][r]);
		}
	}
	resourceIndex = rand() % numResHave;//Pick a random resource to deallocate
	amountDeallocate = rand() % processBlock->allocated[processId][resHave[resourceIndex]] + 1;
	// fprintf(stdout,"%d allocated = %d Before, deallocate %d of them\n", resHave[resourceIndex], processBlock->allocated[processId][resHave[resourceIndex]], amountDeallocate);
	processBlock->release[processId][resHave[resourceIndex]] = processBlock->release[processId][resHave[resourceIndex]] + amountDeallocate;
	processBlock->allocated[processId][resHave[resourceIndex]] = processBlock->allocated[processId][resHave[resourceIndex]] - amountDeallocate;//Pick a random resource to deallocate
	if(resource->shared[resHave[resourceIndex]] == 0){//If not sharable
		resource->available[resHave[resourceIndex]] = resource->available[resHave[resourceIndex]] + amountDeallocate;
		// fprintf(stdout,"%d available = %d After\n", resHave[resourceIndex], resource->available[resHave[resourceIndex]]);
	}
	currTime2 = getTotalTime(&timer->clockSecs, &timer->clockNanos, &currTime2);
	checkDeallocate = genRandomDouble(processId);
	hasResources = false;
	fprintf(stdout,"%d Deallocated %d of Resource %d\n", processId, amountDeallocate, resHave[resourceIndex]);
	printResources(processBlock, resource);
	// fprintf(stdout,"END Random Deallocating of resource %d\n", resHave[resourceIndex]);
	signalSem();//
}

currRunTime = getTotalTime(&timer->clockSecs, &timer->clockNanos, &currRunTime);
if(currRunTime - startTime > 1 && oneSecPassed == false){
	oneSecPassed = true;//If process has run for more than 1 second, start seeing if can terminate
	checkTerminate = genRandomDouble(processId);
	checkDeallocate = genRandomDouble(processId);
	terminateTime = 0;//Check if will terminate if terminateTime > checkTerminate. Start at 0 so doesn't try to terminate immediately
	deallocateTime = 0;//Check if will deallocate if deallocateTime > checkDeallocate.
	currTime = getTotalTime(&timer->clockSecs, &timer->clockNanos, &currTime);
	currTime2 = getTotalTime(&timer->clockSecs, &timer->clockNanos, &currTime2);
	// fprintf(stdout,"%d: 1 Sec passed: %.9f - %.9f = %.9f. Random term time: %.9f, terminateTime: %.9f\n", processId, currRunTime, startTime, currRunTime - startTime, checkTerminate, terminateTime);
}else if(oneSecPassed){
	terminateTime = currRunTime - currTime;//Check if will terminate if terminateTime > checkTerminate
	deallocateTime = currRunTime - currTime2;//Check if will terminate if terminateTime > checkTerminate
	// fprintf(stdout,"%d terminateTime: %.9f - %.9f = %.9f\n", processId, currRunTime, currTime, terminateTime);
}

// signalSchedule();//Signal that another process may start when able
}
endTime = getTotalTime(&timer->clockSecs, &timer->clockNanos, &endTime);//Get time ended at
turnAround = endTime - arrivalTime;
processBlock->totalSystemTime[processId] = endTime - processBlock->totalSystemTime[processId];//endTime - Creation time
processBlock->cpuTimeUsed[processId] = processBlock->cpuTimeUsed[processId] + turnAround;
fprintf(stdout,"%d: arrivalTime %.9f, endTime %.9f, turnAround: %.9f, cpuTimeUsed: %.9f\n", processId, arrivalTime, endTime, turnAround, processBlock->cpuTimeUsed[processId]);
processBlock->processDone = processId;
// printf("%d is Done\n",processId);
return 0;
}

void sigHandler(int mysignal){
	pid_t childId;
	struct PCB *processBlock;
	struct timing *timer;
	struct resourceTable *resource;

        //Attach to shared memory
	if((processBlock = (struct PCB *)shmat(shmidVal, (void *)0, 0)) == (void *)-1){ //Returns void*
		fprintf(stderr,"%s Line %d ",__FILE__,__LINE__);
		perror("shmat");
		exit(EXIT_FAILURE);
	}
	if((timer = (struct timing *)shmat(shmidVal2, 0, 0)) == (void *)-1){ //Returns void*
		fprintf(stderr,"%s Line %d ",__FILE__,__LINE__);
		perror("shmat");
		exit(EXIT_FAILURE);
	}
	if((resource = (struct resourceTable *)shmat(shmidVal3, 0, 0)) == (void *)-1){ //Returns void*
		fprintf(stderr,"%s Line %d ",__FILE__,__LINE__);
		perror("shmat");
		exit(EXIT_FAILURE);
	}
        printf("SLAVE process id %d  signal %d\n", getpid(),mysignal);
	switch(mysignal){
			case SIGINT:
				fprintf(stderr,"Child %d dying because of an interrupt!\n",childId);
				//Detach and Remove shared mem
				if(shmdt(processBlock) == -1){
					fprintf(stderr,"%s Line %d ",__FILE__,__LINE__);
					perror("shmdt");
				   exit(EXIT_FAILURE);
				}
				if (shmctl(shmidVal,IPC_RMID,NULL) == -1){
					fprintf(stderr,"%s Line %d ",__FILE__,__LINE__);
					perror("shmctl");
					exit(EXIT_FAILURE);
				}
				if(shmdt(timer) == -1){
					fprintf(stderr,"%s Line %d ",__FILE__,__LINE__);
						perror("shmdt");
					   exit(EXIT_FAILURE);
				}
				if (shmctl(shmidVal2,IPC_RMID,NULL) == -1){
					fprintf(stderr,"%s Line %d ",__FILE__,__LINE__);
					perror("shmctl");
					exit(EXIT_FAILURE);
				}
				if(shmdt(resource) == -1){
					fprintf(stderr,"%s Line %d ",__FILE__,__LINE__);
						perror("shmdt");
					   exit(EXIT_FAILURE);
				}
				if (shmctl(shmidVal3,IPC_RMID,NULL) == -1){
					fprintf(stderr,"%s Line %d ",__FILE__,__LINE__);
					perror("shmctl");
					exit(EXIT_FAILURE);
				}
				
				//Delete Semaphore.  IPC_RMID Remove the specified semaphore set
				if(semctl(semId, 0, IPC_RMID) == -1){
					fprintf(stderr,"%s Line %d ",__FILE__,__LINE__);
					perror("semctl");
					exit(EXIT_FAILURE);
				}
				if(semctl(semIdCond, 0, IPC_RMID) == -1){
					fprintf(stderr,"%s Line %d ",__FILE__,__LINE__);
					perror("semctl");
					exit(EXIT_FAILURE);
				}
				if(semctl(semId2, 0, IPC_RMID) == -1){
					fprintf(stderr,"%s Line %d ",__FILE__,__LINE__);
					perror("semctl");
					exit(EXIT_FAILURE);
				}
				
				//raise(SIGTERM);
				exit(1);
				break;
		   default:
				printf("Default signal in slave %d\n", mysignal);
				break;
	}
	return;
}

void initSigHandler(){
	struct sigaction signalAct;
	signalAct.sa_handler = &sigHandler;//Setup sigHandler
	signalAct.sa_flags = SA_RESTART|SA_SIGINFO;
	sigfillset(&signalAct.sa_mask);//Block all other signals

	if(sigaction(SIGINT, &signalAct, NULL) == -1){
			perror("SIGINT receipt failed");
	}
}

void printResources(struct PCB* processBlock, struct resourceTable* resource){
	// waitSem2();
	int p, r;
	fprintf(stdout,"*************** Current Available Resources **************\n");
	for(r = 0; r < 20; r++){
		fprintf(stdout,"%d = %d, ", r, resource->available[r]);
	}
	fprintf(stdout,"\n");
	// signalSem2();
	return;
}

int inQueue(int r, int p, int blocked[r][p], int resType, int processId){
	int i;
	for(i = 0; blocked[resType][i] != -1; i++){//Move elements forward in the queue
		if(blocked[resType][i] == processId){
			// fprintf(stdout,"Process %d ALREADY in quueue\n",processId);
			return 1;//Process already in queue
		}
	}
	// fprintf(stdout,"Process %d NOT in quueue\n",processId);
	return 0;//Process not in queue
}

int selectFromQueue(int blocked[], int *tail, int processId){
// int selectFromQueue(int r, int p, int blocked[r][p], int resType, int *tail, int processId){
	if(*tail == -1){// Check for empty Queue
		fprintf(stderr,"BLOCKED QUEUE IS EMPTY \n");
		return -1;  // Return 0 if queue is empty
	}else{
		*tail = *tail - 1;
		// fprintf(stdout,"processId Want = %d, tail = %d\n",processId, *tail);
		// printQueue(20, 18, blocked);
		int i = 0;
		while(blocked[i] != processId){//Find element in queue
			// fprintf(stdout,"Id search blocked[%d] = %d != %d\n",i, blocked[i], processId);
			i++;
		}
		// fprintf(stdout,"Id Found blocked[%d] = %d\n",i, blocked[i]);
		processId = blocked[i];// Get Id to return
		blocked[i] = -1;
		// int i = 1;
		while(blocked[i + 1] != -1){//Move elements forward in the queue
			// fprintf(stdout,"Shift blocked[%d] = %d\n",i , blocked[i + 1]);
			blocked[i] = blocked[i + 1];
			i++;
		}
		// fprintf(stdout,"blocked[%d] = 0\n",i);
		blocked[i] = -1;//Set last spot that was filled to 0 since process moved up in queue
		fprintf(stdout,"Process: Select queue return: %d\n",processId);
		return processId;// Return popped Id
	}
}

void advanceClock(int *clockSecs, int *clockNanos){//1 sec = 1,000 milli = 1,000,000 micro = 1,000,000,000 nano
	waitClock();
	// fprintf(stdout,"ENTER clockSecs %d, clockNanos %d\n",*clockSecs,*clockNanos);
	int randTime = rand() % 999 + 1;//simulate overhead activity for each iteration
	*clockNanos += randTime;
	if(*clockNanos > 999999999){
		*clockSecs = *clockSecs + 1;
		*clockNanos -= 1000000000;
	}
	*clockSecs = *clockSecs + 1;
	// fprintf(stdout,"LEAVE clockSecs %d, clockNanos %d\n",*clockSecs,*clockNanos);
	signalClock();
}

double getTotalTime(int *clockSecs, int *clockNanos, double *time){
	*time = (double)*clockSecs + ((double)*clockNanos/1000000000);
	return *time;
}

double genRandomDouble(int processId){//72500000ns == 72.5 millisecs == .725s
	// fprintf(stdout,"returning %.9f\n", ((double)rand() * ( 0.5 - 0 ) ) / (double)RAND_MAX + 0);
	double randNum = (double)rand() + (double)processId;// + processId so concurrent processes don't get same num since seeded with time
	return (randNum * ( 0.25 - 0 ) ) / (double)RAND_MAX + 0;
	// return ((double)rand() * ( 0.25 - 0 ) ) / (double)RAND_MAX + 0;
}

void waitClock(){
	//fprintf(stdout,"waitClock child %d\n",childId);
	operation.sem_num = 0;/* Which semaphore in the semaphore array*/
    operation.sem_op = -1;/* Subtract 1 from semaphore value*/
    operation.sem_flg = 0;/* Set the flag so we will wait*/
    if(semop(semId, &operation, 1) == -1){
        exit(EXIT_FAILURE);
    }
}

void signalClock(){
	//fprintf(stdout,"signalClock\n");
	operation.sem_num = 0;/* Which semaphore in the semaphore array*/
    operation.sem_op = 1;/* Add 1 to semaphore value*/
    operation.sem_flg = 0;/* Set the flag so we will wait*/
	if(semop(semId, &operation, 1) == -1){
        exit(EXIT_FAILURE);
    }
}

void waitRequest(){
	//fprintf(stdout,"waitSem child %d\n");
	condition.sem_num = 0;/* Which semaphore in the semaphore array*/
    condition.sem_op = -1;/* Subtract 1 from semaphore value*/
    condition.sem_flg = 0;/* Set the flag so we will wait*/
    if(semop(semIdCond, &condition, 1) == -1){
        exit(EXIT_FAILURE);
    }
}

void signalRequest(int processRequesting){
	// fprintf(stdout,"signalRequest processRequesting %d\n",processRequesting);
	if(processRequesting == -1){
		condition.sem_num = 0;/* Which semaphore in the semaphore array*/
		condition.sem_op = 1;/* Add 1 to semaphore value*/
		condition.sem_flg = 0;/* Set the flag so we will wait*/
		if(semop(semIdCond, &condition, 1) == -1){
			exit(EXIT_FAILURE);
		}
	}
}
//Uses same Semaphore as above since both regulate when a process can change resources
//But the area this is used doesn't require a condition to continue
void waitSem(){
	condition.sem_num = 0;/* Which semaphore in the semaphore array*/
    condition.sem_op = -1;/* Subtract 1 from semaphore value*/
    condition.sem_flg = 0;/* Set the flag so we will wait*/
    if(semop(semIdCond, &condition, 1) == -1){
        exit(EXIT_FAILURE);
    }
}

void signalSem(){
	condition.sem_num = 0;/* Which semaphore in the semaphore array*/
    condition.sem_op = 1;/* Add 1 to semaphore value*/
    condition.sem_flg = 0;/* Set the flag so we will wait*/
	if(semop(semIdCond, &condition, 1) == -1){
        exit(EXIT_FAILURE);
    }
}

void waitSem2(){
	// fprintf(stdout,"waitClock child %d\n",childId);
	operation2.sem_num = 0;/* Which semaphore in the semaphore array*/
    operation2.sem_op = -1;/* Subtract 1 from semaphore value*/
    operation2.sem_flg = 0;/* Set the flag so we will wait*/
    if(semop(semId2, &operation2, 1) == -1){
        exit(EXIT_FAILURE);
    }
}

void signalSem2(){
	// fprintf(stdout,"signalClock\n");
	operation2.sem_num = 0;/* Which semaphore in the semaphore array*/
    operation2.sem_op = 1;/* Add 1 to semaphore value*/
    operation2.sem_flg = 0;/* Set the flag so we will wait*/
	if(semop(semId2, &operation2, 1) == -1){
        exit(EXIT_FAILURE);
    }
}

/*$Author: o2-gray $
 *$Date: 2016/04/06 03:18:40 $
 *$Log: process.c,v $
 *Revision 1.5  2016/04/06 03:18:40  o2-gray
 *Communicating with oss and deadlock algorithm correctly
 *
 *Revision 1.4  2016/04/03 03:04:41  o2-gray
 *Communicating with oss when needs resources now.
 *
 *Revision 1.3  2016/04/02 03:54:32  o2-gray
 *Everything set up besides requesting and releasing resources between oss and the processes
 *
 *Revision 1.2  2016/04/01 03:07:40  o2-gray
 *Getting values properly from oss right now
 *
 *Revision 1.1  2016/03/30 04:02:54  o2-gray
 *Initial revision
 *
 */@


1.5
log
@Communicating with oss and deadlock algorithm correctly
@
text
@d4 1
d21 1
a21 1
double currTime, arrivalTime, startTime, endTime, turnAround, currRunTime, terminateTime, checkTerminate;
d23 2
a24 2
int processRequestId = -2;
int terminate = 0;
d28 1
d53 1
a53 1
//Get semaphores
d64 5
a68 7
// if((semIdCond = semget(semKeyCond,1,0)) == -1){
	// fprintf(stderr,"%s Line %d ",__FILE__,__LINE__);
	// perror(" semget");
	// exit(EXIT_FAILURE);
// }

processBlock->running[processId] = 1;
d70 1
a70 1
fprintf(stdout,"********************************Process %d Max Claims***********************************\n", processId);
d73 1
a73 1
	fprintf(stdout,"Res %d = %d, ", r, processBlock->maxClaim[processId][r]);
d75 1
a75 1
fprintf(stdout,"\n\n");
d77 1
a77 1
fprintf(stdout,"********************************Process %d Needs***********************************\n", processId);
d84 1
a85 3
// while(processBlock->processScheduled != processId){//wait for processes to get resources needed to run
	// waitSchedule(processBlock->processScheduled,processId);
// }
d96 1
a96 1
		// if(currRunTime > 10){//Deallocate all resources and end
d100 3
d104 2
d107 4
a110 4
				if(inQueue(20, 18, resource->blocked, r, processId)){//If process not already in queue for requesting resources
					// processBlocked = true;
					int id = selectFromQueue(resource->blocked[r], resource->blockedTail, processId);
					fprintf(stdout,"Process %d Removed from %d Queue\n", id, r);
d114 8
a121 1
			break;
d123 25
a147 12
		/***********************************
		Request resources - request (need?) + processBlock->allocated[processId][a] <= resource->total[20];//always: request + allocated <= total 
		***********************************/
		fprintf(stdout,"Process %d processBlock->processRequesting BEFORE %d...\n", processId, processBlock->processRequesting);
		waitRequest();
		fprintf(stdout,"%d after waitRequest\n", processId);
		processBlock->processRequesting = processId;
		processRequestId = processBlock->processRequesting;
		fprintf(stdout,"Process processBlock->processRequesting %d\n", processBlock->processRequesting);
		// int t = 0;
		// while(processBlock->processRequesting != -1){
		while(processRequestId != -1){
d149 16
a164 8
			// if(t > 100000){
				// fprintf(stdout,"SEMAPHORE processBlock->processRequesting %d\n", processRequestId);
				// t = 0;
			// }
			// t++;
			// processRequestId = processBlock->processRequesting;
			signalRequest(processRequestId);
			// signalRequest(processBlock->processRequesting);
a165 5
		// fprintf(stdout,"Process %d processBlock->processRequesting AFTER %d...\n", processId, processBlock->processRequesting);
		advanceClock(&timer->clockSecs, &timer->clockNanos);//advance clock since not terminating
		currTime = getTotalTime(&timer->clockSecs, &timer->clockNanos, &currTime);
		checkTerminate = genRandomDouble(processId);//Generate new time 0-250ms to see if we will terminate
		fprintf(stdout,"Process %d NOT terminating %d, processBlock->processRequesting AFTER %d, NEW terminate time: %.9f...\n", processId, terminate, processBlock->processRequesting, checkTerminate);
d169 6
a174 1
// processBlock->processScheduled = 0;//Process is done, no longer scheduled
d176 47
a222 2
// fprintf(stdout,"%d is running, quantum ran: %d, Time left: %d after running\n",processId, quantum, processBlock->burstTimeLeft[processId]);
// fprintf(stdout,"arrivalTime %.9f, endTime %.9f, turnAround: %.9f, cpuTimeUsed: %.9f, quantum added: %.9f\n",arrivalTime, endTime, turnAround, processBlock->cpuTimeUsed[processId], (double)quantum/1000000000);
d228 1
d230 1
d232 2
a233 1
	fprintf(stdout,"%d: 1 Sec passed: %.9f - %.9f = %.9f. Random term time: %.9f, terminateTime: %.9f\n", processId, currRunTime, startTime, currRunTime - startTime, checkTerminate, terminateTime);
d236 1
d244 1
d274 1
a274 1
        //printf("SLAVE process id %d  signal %d\n", getpid(),mysignal);
d321 6
a326 6
				//Delete Monitor condition Semaphore.
				// if(semctl(semIdCond, 0, IPC_RMID) == -1){
					// fprintf(stderr,"%s Line %d ",__FILE__,__LINE__);
					// perror("semctl");
					// exit(EXIT_FAILURE);
				// }
d348 12
d379 1
a379 1
		fprintf(stdout,"processId Want = %d, tail = %d\n",processId, *tail);
d383 1
a383 1
			fprintf(stdout,"Id search blocked[%d] = %d != %d\n",i, blocked[i], processId);
d386 1
a386 1
		fprintf(stdout,"Id Found blocked[%d] = %d\n",i, blocked[i]);
d391 1
a391 1
			fprintf(stdout,"Shift blocked[%d] = %d\n",i , blocked[i + 1]);
d397 1
a397 1
		fprintf(stdout,"Select queue return: %d\n",processId);
a406 2
	// *clockNanos += timeAdding;
	// fprintf(stdout,"ENTER clockNanos %d, randTime %d, %d += %d\n",*clockNanos,randTime,*clockNanos,randTime);
a416 1
	// double time = (double)*clockSecs + ((double)*clockNanos/1000000000);
a420 1
// double genRandomDouble(){//72500000ns == 72.5 millisecs == .725s
a422 1
	// return ((double)rand() * (max - min)) / (double)RAND_MAX + min;
d469 19
d489 9
a497 9
// void waitRequest(){
	// fprintf(stdout,"waitSem child %d\n");
	// condition.sem_num = 0;/* Which semaphore in the semaphore array*/
    // condition.sem_op = -1;/* Subtract 1 from semaphore value*/
    // condition.sem_flg = 0;/* Set the flag so we will wait*/
    // if(semop(semId2, &condition, 1) == -1){
        // exit(EXIT_FAILURE);
    // }
// }
d499 9
a507 11
// void signalRequest(int processRequesting){
	// fprintf(stdout,"signalRequest processRequesting %d\n",processRequesting);
	// if(processRequesting == -1){
		// condition.sem_num = 0;/* Which semaphore in the semaphore array*/
		// condition.sem_op = 1;/* Add 1 to semaphore value*/
		// condition.sem_flg = 0;/* Set the flag so we will wait*/
		// if(semop(semId2, &condition, 1) == -1){
			// exit(EXIT_FAILURE);
		// }
	// }
// }
d510 1
a510 1
 *$Date: 2016/04/03 03:04:41 $
d512 3
@


1.4
log
@Communicating with oss when needs resources now.
@
text
@d24 1
a24 1
int a;//For for loops
d26 1
d68 2
d71 3
a73 3
for(a = 0; a < 20; a++){//Figure out this processes max claim for each resource
	processBlock->maxClaim[processId][a] = rand() % resource->total[a];//Max claim = [0-total number of this resource in system]
	fprintf(stdout,"Res %d = %d, ", a, processBlock->maxClaim[processId][a]);
d78 3
a80 3
for(a = 0; a < 20; a++){
	resource->need[processId][a] = processBlock->maxClaim[processId][a] - resource->allocated[processId][a];//Need = Max - Allocated
	fprintf(stdout,"%d of %d, ", resource->need[processId][a], a);
d97 2
a98 2
		// if(terminate == 1){//Deallocate all resources and end
		if(currRunTime > 10){//Deallocate all resources and end
d102 9
a110 1
			fprintf(stdout,"Process %d terminating %d...\n", processId, terminate);
d114 1
a114 1
		Request resources - request (need?) + resource->allocated[processId][a] <= resource->total[20];//always: request + allocated <= total 
a115 1
		
d118 1
a118 1
		// fprintf(stdout,"%d after waitRequest\n", processId);
d121 1
a121 1
		// fprintf(stdout,"Process processBlock->processRequesting %d\n", processBlock->processRequesting);
d123 1
a123 1
		// while(processBlock->processRequesting){
d125 1
d131 3
a133 2
			processRequestId = processBlock->processRequesting;
			signalRequest(processBlock->processRequesting);
d139 1
a139 1
		fprintf(stdout,"Process %d NOT terminating %d, NEW terminate time: %.9f...\n", processId, terminate, checkTerminate);
d267 42
d405 1
a405 1
 *$Date: 2016/04/02 03:54:32 $
d407 3
@


1.3
log
@Everything set up besides requesting and releasing resources between oss and the processes
@
text
@d4 1
a4 1
int semKeyCond = 90210, semIdCond;
d22 1
d35 1
a35 1
        fprintf(stderr,"%s ",__FILE__);
d40 1
a40 1
	fprintf(stderr,"%s ",__FILE__);
d51 2
a52 2
if((semId = semget(semKey,1,0)) == -1){
	fprintf(stderr,"%s",__FILE__);
d56 2
a57 2
if((semIdCond = semget(semKeyCond,1,0)) == -1){
	fprintf(stderr,"%s",__FILE__);
d61 5
d68 1
a68 1
for(a = 0; a < 20; a++){//Figure out this processes mas claim for each resource
d74 7
d82 3
a84 3
while(processBlock->processScheduled != processId){//wait for processes to get resources needed to run
	waitSchedule(processBlock->processScheduled,processId);
}
d94 2
a95 1
		if(terminate == 1){//Deallocate all resources and end
d103 1
a103 1
		Request resources
d105 17
a121 3
		for(a = 0; a < 20; a++){
			resource->need[processId][a] = processBlock->maxClaim[processId][a] - resource->allocated[processId][a];//Need = Max - Allocated
			//request (need?) + resource->allocated[processId][a] <= resource->total[20];//always: request + allocated <= total 
d123 1
a130 2
// fprintf(stdout,"%d is running, quantum ran: %d, Time left: %d after running\n",processId, quantum, processBlock->burstTimeLeft[processId]);

a148 1
// signalSem();//signal oss semaphore that it can schedule another process
d167 1
a167 1
		fprintf(stderr,"%s ",__FILE__);
d172 1
a172 1
		fprintf(stderr,"%s ",__FILE__);
d177 1
a177 1
		fprintf(stderr,"%s ",__FILE__);
d187 1
a187 1
					fprintf(stderr,"%s ",__FILE__);
d192 1
a192 1
					fprintf(stderr,"%s ",__FILE__);
d197 1
a197 1
					fprintf(stderr,"%s ",__FILE__);
d202 1
a202 1
					fprintf(stderr,"%s ",__FILE__);
d207 1
a207 1
					fprintf(stderr,"%s ",__FILE__);
d212 1
a212 1
					fprintf(stderr,"%s ",__FILE__);
d219 6
a224 1
					fprintf(stderr,"%s ",__FILE__);
d230 1
a230 1
					// fprintf(stderr,"%s ",__FILE__);
d256 1
d268 1
d286 12
a297 2
void signalSem(){
	//fprintf(stdout,"signalSem\n");
d306 13
a318 3
void waitSchedule(int processScheduled, int processId){
	if(processScheduled == processId){
		// fprintf(stdout,"waitCond child %d, numProcesses %d\n",childId,numProcesses);
d320 1
a320 1
		condition.sem_op = -1;/* Subtract 1 from semaphore value*/
d328 21
a348 8
void signalSchedule(){
	condition.sem_num = 0;/* Which semaphore in the semaphore array*/
	condition.sem_op = 1;/* Subtract 1 from semaphore value*/
	condition.sem_flg = 0;/* Set the flag so we will wait*/
	if(semop(semIdCond, &condition, 1) == -1){
		exit(EXIT_FAILURE);
	}
}
d351 1
a351 1
 *$Date: 2016/04/01 03:07:40 $
d353 3
@


1.2
log
@Getting values properly from oss right now
@
text
@a2 1
// int semKeyCond = 90210, semIdCond;
d4 1
d18 3
a20 3
shmidVal2 = strtol(argv[3],&p,10);
// int priority = strtol(argv[3],&p,10);
double currTime, arrivalTime, startTime, endTime, turnAround, runningTime;
d23 4
d55 12
a66 5
// if((semIdCond = semget(semKeyCond,1,0)) == -1){
	// fprintf(stderr,"%s",__FILE__);
	// perror(" semget");
	// exit(EXIT_FAILURE);
// }
d69 3
a71 3
// while(processBlock->processScheduled != processId){//wait for processes to get resources needed to run
	// waitSchedule(processBlock->processScheduled,processId);
// }
d73 2
a74 2
while(terminate != 0){
	// fprintf(stdout,"ENTER %d Previous burst time: %d, Burst time: %d, difference: %d, cpuTimeUsed: %.9f\n",processId, processBlock->prevBurstTime[processId], processBlock->burstTimeLeft[processId], processBlock->burstTimeLeft[processId] - processBlock->prevBurstTime[processId], processBlock->cpuTimeUsed[processId]);
d76 23
a98 9
if(runningTime > 1){//If process has run for more than 1 second
	//Check if process chould terminate at random times between 0 and 250ms
	terminate = rand() % 2;//Check if process will terminate
	if(terminate == 1){//Deallocate all resources and end
		/***************************
		Deallocate resources
		***************************/
		fprintf(stdout,"Process %d terminating...\n", processId);
		break;
d105 1
a105 3
endTime = getTotalTime(&timer->clockSecs, &timer->clockNanos, &endTime);//Get time ended at
turnAround = endTime - arrivalTime;
// processBlock->cpuTimeUsed[processId] = processBlock->cpuTimeUsed[processId] + turnAround + ((double)quantum/1000000000);
d109 12
a120 2
currTime = getTotalTime(&timer->clockSecs, &timer->clockNanos, &currTime);
runningTime = currTime - startTime;
d124 6
a129 1
printf("%d is Done\n",processId);
d244 9
d263 2
a264 2
// void waitSchedule(int processScheduled, int processId){
	// if(processScheduled == processId){
d266 17
a282 17
		// condition.sem_num = 0;/* Which semaphore in the semaphore array*/
		// condition.sem_op = -1;/* Subtract 1 from semaphore value*/
		// condition.sem_flg = 0;/* Set the flag so we will wait*/
		// if(semop(semIdCond, &condition, 1) == -1){
			// exit(EXIT_FAILURE);
		// }
	// }
// }

// void signalSchedule(){
	// condition.sem_num = 0;/* Which semaphore in the semaphore array*/
	// condition.sem_op = 1;/* Subtract 1 from semaphore value*/
	// condition.sem_flg = 0;/* Set the flag so we will wait*/
	// if(semop(semIdCond, &condition, 1) == -1){
		// exit(EXIT_FAILURE);
	// }
// }
d285 1
a285 1
 *$Date: 2016/03/30 04:02:54 $
d287 3
@


1.1
log
@Initial revision
@
text
@d3 1
d5 1
a5 2
// int semKeyCond = 90210, semIdCond;
int key = 8008135;
d7 1
d10 2
d18 1
d20 1
a20 1
double currTime, arrivalTime, endTime, turnAround, runningTime;
d26 1
a33 1
//shmat attaches the shared memory segment specified by shmid to the address space
d39 5
d58 4
a63 4
	
// while(processBlock->processScheduled != processId){//wait for process scheduled == this processId
	// waitSchedule(processBlock->processScheduled,processId);
// }
d68 6
a73 2
	if(terminate == 1){//Deallocate all resources
		
d86 2
d96 4
a99 3
		pid_t childId;
        struct PCB *processBlock;
		struct timing *timer;
d103 4
a106 4
                fprintf(stderr,"%s ",__FILE__);
                perror("shmat");
                exit(EXIT_FAILURE);
        }
d112 5
d121 1
a126 1
				//Remove shared mem when all processes done
a131 1
				//Detach from shared mem
a136 1
				//Remove shared mem when all processes done
d142 10
d169 2
a170 2
					printf("Default signal in slave %d\n", mysignal);
					break;
d237 6
a242 3
/*$Author$
 *$Date$
 *$Log$
@
